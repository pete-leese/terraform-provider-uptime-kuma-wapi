// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/pete-leese/terraform-provider-ukumawapi/internal/provider/types"
	"github.com/pete-leese/terraform-provider-ukumawapi/internal/sdk"
	"github.com/pete-leese/terraform-provider-ukumawapi/internal/sdk/models/operations"
	"github.com/pete-leese/terraform-provider-ukumawapi/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &BackupResource{}
var _ resource.ResourceWithImportState = &BackupResource{}

func NewBackupResource() resource.Resource {
	return &BackupResource{}
}

// BackupResource defines the resource implementation.
type BackupResource struct {
	client *sdk.TerraformProviderUkumawapi
}

// BackupResourceModel describes the resource data model.
type BackupResourceModel struct {
	Data             types.String                   `tfsdk:"data"`
	ImportHandle     types.String                   `tfsdk:"import_handle"`
	MonitorList      []tfTypes.MonitorListItem      `tfsdk:"monitor_list"`
	NotificationList []tfTypes.NotificationListItem `tfsdk:"notification_list"`
	ProxyList        []types.String                 `tfsdk:"proxy_list"`
	Version          types.String                   `tfsdk:"version"`
}

func (r *BackupResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_backup"
}

func (r *BackupResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Backup Resource",
		Attributes: map[string]schema.Attribute{
			"data": schema.StringAttribute{
				Computed:    true,
				Description: `Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"import_handle": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `An enumeration. must be one of ["skip", "overwrite", "keep"]; Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"skip",
						"overwrite",
						"keep",
					),
				},
			},
			"monitor_list": schema.ListNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				NestedObject: schema.NestedAttributeObject{
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
					},
					Attributes: map[string]schema.Attribute{
						"accepted_statuscodes": schema.ListAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
							},
							ElementType: types.StringType,
							Description: `Requires replacement if changed.`,
						},
						"active": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"auth_domain": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"auth_method": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"auth_workstation": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"basic_auth_pass": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"basic_auth_user": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"body": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"database_connection_string": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"database_query": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"dns_last_result": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"dns_resolve_server": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"dns_resolve_type": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"docker_container": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"docker_host": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"expiry_notification": schema.BoolAttribute{
							Required: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"headers": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"hostname": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"id": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"ignore_tls": schema.BoolAttribute{
							Required: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"interval": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"keyword": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"maxredirects": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"maxretries": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"method": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"mqtt_password": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"mqtt_success_message": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"mqtt_topic": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"mqtt_username": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"name": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"notification_id_list": schema.SingleNestedAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"port": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"proxy_id": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"push_token": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"radius_called_station_id": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"radius_calling_station_id": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"radius_password": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"radius_secret": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"radius_username": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"resend_interval": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"retry_interval": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"tags": schema.ListAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
							},
							ElementType: types.StringType,
							Description: `Requires replacement if changed.`,
							Validators: []validator.List{
								listvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
						"type": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"upside_down": schema.BoolAttribute{
							Required: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"url": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"weight": schema.Int64Attribute{
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"notification_list": schema.ListNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				NestedObject: schema.NestedAttributeObject{
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
					},
					Attributes: map[string]schema.Attribute{
						"active": schema.BoolAttribute{
							Required: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"config": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"id": schema.Int64Attribute{
							Required: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"is_default": schema.BoolAttribute{
							Required: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"name": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
						"user_id": schema.Int64Attribute{
							Required: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Requires replacement if changed.`,
						},
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"proxy_list": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.StringType,
				Description: `Requires replacement if changed.`,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"version": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
		},
	}
}

func (r *BackupResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.TerraformProviderUkumawapi)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.TerraformProviderUkumawapi, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *BackupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *BackupResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	importHandle := shared.ImportHandleType(data.ImportHandle.ValueString())
	backup := *data.ToSharedBackup()
	request := operations.UploadBackupSettingsUploadBackupPostRequest{
		ImportHandle: importHandle,
		Backup:       backup,
	}
	res, err := r.client.Settings.UploadBackupSettingsUploadBackupPost(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Any != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromInterface(res.Any)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *BackupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *BackupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *BackupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *BackupResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *BackupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *BackupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *BackupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource backup.")
}
