// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type Notificationidlist struct {
}

type MonitorListItem struct {
	ID                       *int64              `json:"id,omitempty"`
	Name                     *string             `json:"name,omitempty"`
	URL                      *string             `json:"url,omitempty"`
	Method                   *string             `json:"method,omitempty"`
	Hostname                 any                 `json:"hostname,omitempty"`
	Port                     *int64              `json:"port,omitempty"`
	Maxretries               *int64              `json:"maxretries,omitempty"`
	Weight                   *int64              `json:"weight,omitempty"`
	Active                   *int64              `json:"active,omitempty"`
	Type                     *string             `json:"type,omitempty"`
	Interval                 *int64              `json:"interval,omitempty"`
	RetryInterval            *int64              `json:"retryInterval,omitempty"`
	ResendInterval           *int64              `json:"resendInterval,omitempty"`
	Keyword                  any                 `json:"keyword,omitempty"`
	ExpiryNotification       bool                `json:"expiryNotification"`
	IgnoreTLS                bool                `json:"ignoreTls"`
	UpsideDown               bool                `json:"upsideDown"`
	Maxredirects             *int64              `json:"maxredirects,omitempty"`
	AcceptedStatuscodes      []string            `json:"accepted_statuscodes,omitempty"`
	DNSResolveType           *string             `json:"dns_resolve_type,omitempty"`
	DNSResolveServer         *string             `json:"dns_resolve_server,omitempty"`
	DNSLastResult            any                 `json:"dns_last_result,omitempty"`
	PushToken                any                 `json:"pushToken,omitempty"`
	DockerContainer          any                 `json:"docker_container,omitempty"`
	DockerHost               any                 `json:"docker_host,omitempty"`
	ProxyID                  any                 `json:"proxyId,omitempty"`
	NotificationIDList       *Notificationidlist `json:"notificationIDList,omitempty"`
	Tags                     []any               `json:"tags,omitempty"`
	MqttUsername             any                 `json:"mqttUsername,omitempty"`
	MqttPassword             any                 `json:"mqttPassword,omitempty"`
	MqttTopic                any                 `json:"mqttTopic,omitempty"`
	MqttSuccessMessage       any                 `json:"mqttSuccessMessage,omitempty"`
	DatabaseConnectionString any                 `json:"databaseConnectionString,omitempty"`
	DatabaseQuery            any                 `json:"databaseQuery,omitempty"`
	AuthMethod               *string             `json:"authMethod,omitempty"`
	AuthWorkstation          any                 `json:"authWorkstation,omitempty"`
	AuthDomain               any                 `json:"authDomain,omitempty"`
	RadiusUsername           any                 `json:"radiusUsername,omitempty"`
	RadiusPassword           any                 `json:"radiusPassword,omitempty"`
	RadiusCalledStationID    any                 `json:"radiusCalledStationId,omitempty"`
	RadiusCallingStationID   any                 `json:"radiusCallingStationId,omitempty"`
	RadiusSecret             any                 `json:"radiusSecret,omitempty"`
	Headers                  any                 `json:"headers,omitempty"`
	Body                     any                 `json:"body,omitempty"`
	BasicAuthUser            any                 `json:"basic_auth_user,omitempty"`
	BasicAuthPass            any                 `json:"basic_auth_pass,omitempty"`
}

func (o *MonitorListItem) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MonitorListItem) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MonitorListItem) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *MonitorListItem) GetMethod() *string {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *MonitorListItem) GetHostname() any {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *MonitorListItem) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *MonitorListItem) GetMaxretries() *int64 {
	if o == nil {
		return nil
	}
	return o.Maxretries
}

func (o *MonitorListItem) GetWeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

func (o *MonitorListItem) GetActive() *int64 {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *MonitorListItem) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *MonitorListItem) GetInterval() *int64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *MonitorListItem) GetRetryInterval() *int64 {
	if o == nil {
		return nil
	}
	return o.RetryInterval
}

func (o *MonitorListItem) GetResendInterval() *int64 {
	if o == nil {
		return nil
	}
	return o.ResendInterval
}

func (o *MonitorListItem) GetKeyword() any {
	if o == nil {
		return nil
	}
	return o.Keyword
}

func (o *MonitorListItem) GetExpiryNotification() bool {
	if o == nil {
		return false
	}
	return o.ExpiryNotification
}

func (o *MonitorListItem) GetIgnoreTLS() bool {
	if o == nil {
		return false
	}
	return o.IgnoreTLS
}

func (o *MonitorListItem) GetUpsideDown() bool {
	if o == nil {
		return false
	}
	return o.UpsideDown
}

func (o *MonitorListItem) GetMaxredirects() *int64 {
	if o == nil {
		return nil
	}
	return o.Maxredirects
}

func (o *MonitorListItem) GetAcceptedStatuscodes() []string {
	if o == nil {
		return nil
	}
	return o.AcceptedStatuscodes
}

func (o *MonitorListItem) GetDNSResolveType() *string {
	if o == nil {
		return nil
	}
	return o.DNSResolveType
}

func (o *MonitorListItem) GetDNSResolveServer() *string {
	if o == nil {
		return nil
	}
	return o.DNSResolveServer
}

func (o *MonitorListItem) GetDNSLastResult() any {
	if o == nil {
		return nil
	}
	return o.DNSLastResult
}

func (o *MonitorListItem) GetPushToken() any {
	if o == nil {
		return nil
	}
	return o.PushToken
}

func (o *MonitorListItem) GetDockerContainer() any {
	if o == nil {
		return nil
	}
	return o.DockerContainer
}

func (o *MonitorListItem) GetDockerHost() any {
	if o == nil {
		return nil
	}
	return o.DockerHost
}

func (o *MonitorListItem) GetProxyID() any {
	if o == nil {
		return nil
	}
	return o.ProxyID
}

func (o *MonitorListItem) GetNotificationIDList() *Notificationidlist {
	if o == nil {
		return nil
	}
	return o.NotificationIDList
}

func (o *MonitorListItem) GetTags() []any {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *MonitorListItem) GetMqttUsername() any {
	if o == nil {
		return nil
	}
	return o.MqttUsername
}

func (o *MonitorListItem) GetMqttPassword() any {
	if o == nil {
		return nil
	}
	return o.MqttPassword
}

func (o *MonitorListItem) GetMqttTopic() any {
	if o == nil {
		return nil
	}
	return o.MqttTopic
}

func (o *MonitorListItem) GetMqttSuccessMessage() any {
	if o == nil {
		return nil
	}
	return o.MqttSuccessMessage
}

func (o *MonitorListItem) GetDatabaseConnectionString() any {
	if o == nil {
		return nil
	}
	return o.DatabaseConnectionString
}

func (o *MonitorListItem) GetDatabaseQuery() any {
	if o == nil {
		return nil
	}
	return o.DatabaseQuery
}

func (o *MonitorListItem) GetAuthMethod() *string {
	if o == nil {
		return nil
	}
	return o.AuthMethod
}

func (o *MonitorListItem) GetAuthWorkstation() any {
	if o == nil {
		return nil
	}
	return o.AuthWorkstation
}

func (o *MonitorListItem) GetAuthDomain() any {
	if o == nil {
		return nil
	}
	return o.AuthDomain
}

func (o *MonitorListItem) GetRadiusUsername() any {
	if o == nil {
		return nil
	}
	return o.RadiusUsername
}

func (o *MonitorListItem) GetRadiusPassword() any {
	if o == nil {
		return nil
	}
	return o.RadiusPassword
}

func (o *MonitorListItem) GetRadiusCalledStationID() any {
	if o == nil {
		return nil
	}
	return o.RadiusCalledStationID
}

func (o *MonitorListItem) GetRadiusCallingStationID() any {
	if o == nil {
		return nil
	}
	return o.RadiusCallingStationID
}

func (o *MonitorListItem) GetRadiusSecret() any {
	if o == nil {
		return nil
	}
	return o.RadiusSecret
}

func (o *MonitorListItem) GetHeaders() any {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *MonitorListItem) GetBody() any {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *MonitorListItem) GetBasicAuthUser() any {
	if o == nil {
		return nil
	}
	return o.BasicAuthUser
}

func (o *MonitorListItem) GetBasicAuthPass() any {
	if o == nil {
		return nil
	}
	return o.BasicAuthPass
}
