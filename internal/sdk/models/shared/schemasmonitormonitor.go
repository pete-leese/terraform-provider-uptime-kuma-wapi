// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform-provider-ukumawapi/internal/sdk/internal/utils"
)

// AuthMethod - Enumerate authentication methods for monitors.
type AuthMethod string

const (
	AuthMethodUnknown AuthMethod = ""
	AuthMethodBasic   AuthMethod = "basic"
	AuthMethodNtlm    AuthMethod = "ntlm"
	AuthMethodMtls    AuthMethod = "mtls"
)

func (e AuthMethod) ToPointer() *AuthMethod {
	return &e
}
func (e *AuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "basic":
		fallthrough
	case "ntlm":
		fallthrough
	case "mtls":
		*e = AuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthMethod: %v", v)
	}
}

type SchemasMonitorMonitor struct {
	// Enumerate monitor types.
	Type                     MonitorType `json:"type"`
	Name                     string      `json:"name"`
	Interval                 *int64      `default:"60" json:"interval"`
	RetryInterval            *int64      `default:"60" json:"retryInterval"`
	ResendInterval           *int64      `default:"0" json:"resendInterval"`
	Maxretries               *int64      `default:"0" json:"maxretries"`
	UpsideDown               *bool       `default:"false" json:"upsideDown"`
	NotificationIDList       []any       `json:"notificationIDList,omitempty"`
	URL                      *string     `json:"url,omitempty"`
	ExpiryNotification       *bool       `default:"false" json:"expiryNotification"`
	IgnoreTLS                *bool       `default:"false" json:"ignoreTls"`
	Maxredirects             *int64      `default:"10" json:"maxredirects"`
	AcceptedStatuscodes      []any       `json:"accepted_statuscodes,omitempty"`
	ProxyID                  *int64      `json:"proxyId,omitempty"`
	Method                   *string     `default:"GET" json:"method"`
	Body                     *string     `json:"body,omitempty"`
	Headers                  *string     `json:"headers,omitempty"`
	AuthMethod               *AuthMethod `default:"" json:"authMethod"`
	BasicAuthUser            *string     `json:"basic_auth_user,omitempty"`
	BasicAuthPass            *string     `json:"basic_auth_pass,omitempty"`
	AuthDomain               *string     `json:"authDomain,omitempty"`
	AuthWorkstation          *string     `json:"authWorkstation,omitempty"`
	Keyword                  *string     `json:"keyword,omitempty"`
	Hostname                 *string     `json:"hostname,omitempty"`
	Port                     *int64      `default:"53" json:"port"`
	DNSResolveServer         *string     `default:"1.1.1.1" json:"dns_resolve_server"`
	DNSResolveType           *string     `default:"A" json:"dns_resolve_type"`
	MqttUsername             *string     `json:"mqttUsername,omitempty"`
	MqttPassword             *string     `json:"mqttPassword,omitempty"`
	MqttTopic                *string     `json:"mqttTopic,omitempty"`
	MqttSuccessMessage       *string     `json:"mqttSuccessMessage,omitempty"`
	DatabaseConnectionString *string     `json:"databaseConnectionString,omitempty"`
	DatabaseQuery            *string     `json:"databaseQuery,omitempty"`
	DockerContainer          *string     `default:"" json:"docker_container"`
	DockerHost               *int64      `json:"docker_host,omitempty"`
	RadiusUsername           *string     `json:"radiusUsername,omitempty"`
	RadiusPassword           *string     `json:"radiusPassword,omitempty"`
	RadiusSecret             *string     `json:"radiusSecret,omitempty"`
	RadiusCalledStationID    *string     `json:"radiusCalledStationId,omitempty"`
	RadiusCallingStationID   *string     `json:"radiusCallingStationId,omitempty"`
}

func (s SchemasMonitorMonitor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasMonitorMonitor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SchemasMonitorMonitor) GetType() MonitorType {
	if o == nil {
		return MonitorType("")
	}
	return o.Type
}

func (o *SchemasMonitorMonitor) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SchemasMonitorMonitor) GetInterval() *int64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *SchemasMonitorMonitor) GetRetryInterval() *int64 {
	if o == nil {
		return nil
	}
	return o.RetryInterval
}

func (o *SchemasMonitorMonitor) GetResendInterval() *int64 {
	if o == nil {
		return nil
	}
	return o.ResendInterval
}

func (o *SchemasMonitorMonitor) GetMaxretries() *int64 {
	if o == nil {
		return nil
	}
	return o.Maxretries
}

func (o *SchemasMonitorMonitor) GetUpsideDown() *bool {
	if o == nil {
		return nil
	}
	return o.UpsideDown
}

func (o *SchemasMonitorMonitor) GetNotificationIDList() []any {
	if o == nil {
		return nil
	}
	return o.NotificationIDList
}

func (o *SchemasMonitorMonitor) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *SchemasMonitorMonitor) GetExpiryNotification() *bool {
	if o == nil {
		return nil
	}
	return o.ExpiryNotification
}

func (o *SchemasMonitorMonitor) GetIgnoreTLS() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreTLS
}

func (o *SchemasMonitorMonitor) GetMaxredirects() *int64 {
	if o == nil {
		return nil
	}
	return o.Maxredirects
}

func (o *SchemasMonitorMonitor) GetAcceptedStatuscodes() []any {
	if o == nil {
		return nil
	}
	return o.AcceptedStatuscodes
}

func (o *SchemasMonitorMonitor) GetProxyID() *int64 {
	if o == nil {
		return nil
	}
	return o.ProxyID
}

func (o *SchemasMonitorMonitor) GetMethod() *string {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *SchemasMonitorMonitor) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *SchemasMonitorMonitor) GetHeaders() *string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *SchemasMonitorMonitor) GetAuthMethod() *AuthMethod {
	if o == nil {
		return nil
	}
	return o.AuthMethod
}

func (o *SchemasMonitorMonitor) GetBasicAuthUser() *string {
	if o == nil {
		return nil
	}
	return o.BasicAuthUser
}

func (o *SchemasMonitorMonitor) GetBasicAuthPass() *string {
	if o == nil {
		return nil
	}
	return o.BasicAuthPass
}

func (o *SchemasMonitorMonitor) GetAuthDomain() *string {
	if o == nil {
		return nil
	}
	return o.AuthDomain
}

func (o *SchemasMonitorMonitor) GetAuthWorkstation() *string {
	if o == nil {
		return nil
	}
	return o.AuthWorkstation
}

func (o *SchemasMonitorMonitor) GetKeyword() *string {
	if o == nil {
		return nil
	}
	return o.Keyword
}

func (o *SchemasMonitorMonitor) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *SchemasMonitorMonitor) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SchemasMonitorMonitor) GetDNSResolveServer() *string {
	if o == nil {
		return nil
	}
	return o.DNSResolveServer
}

func (o *SchemasMonitorMonitor) GetDNSResolveType() *string {
	if o == nil {
		return nil
	}
	return o.DNSResolveType
}

func (o *SchemasMonitorMonitor) GetMqttUsername() *string {
	if o == nil {
		return nil
	}
	return o.MqttUsername
}

func (o *SchemasMonitorMonitor) GetMqttPassword() *string {
	if o == nil {
		return nil
	}
	return o.MqttPassword
}

func (o *SchemasMonitorMonitor) GetMqttTopic() *string {
	if o == nil {
		return nil
	}
	return o.MqttTopic
}

func (o *SchemasMonitorMonitor) GetMqttSuccessMessage() *string {
	if o == nil {
		return nil
	}
	return o.MqttSuccessMessage
}

func (o *SchemasMonitorMonitor) GetDatabaseConnectionString() *string {
	if o == nil {
		return nil
	}
	return o.DatabaseConnectionString
}

func (o *SchemasMonitorMonitor) GetDatabaseQuery() *string {
	if o == nil {
		return nil
	}
	return o.DatabaseQuery
}

func (o *SchemasMonitorMonitor) GetDockerContainer() *string {
	if o == nil {
		return nil
	}
	return o.DockerContainer
}

func (o *SchemasMonitorMonitor) GetDockerHost() *int64 {
	if o == nil {
		return nil
	}
	return o.DockerHost
}

func (o *SchemasMonitorMonitor) GetRadiusUsername() *string {
	if o == nil {
		return nil
	}
	return o.RadiusUsername
}

func (o *SchemasMonitorMonitor) GetRadiusPassword() *string {
	if o == nil {
		return nil
	}
	return o.RadiusPassword
}

func (o *SchemasMonitorMonitor) GetRadiusSecret() *string {
	if o == nil {
		return nil
	}
	return o.RadiusSecret
}

func (o *SchemasMonitorMonitor) GetRadiusCalledStationID() *string {
	if o == nil {
		return nil
	}
	return o.RadiusCalledStationID
}

func (o *SchemasMonitorMonitor) GetRadiusCallingStationID() *string {
	if o == nil {
		return nil
	}
	return o.RadiusCallingStationID
}
